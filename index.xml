<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on 剪径小贼</title><link>/</link><description>Recent content in Home on 剪径小贼</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Weekly-20191201</title><link>/weekly/2019/12/01-weekly-20191201/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/12/01-weekly-20191201/</guid><description>挑了一本上周下载的 Operating Systems: Three easy pieces 1. 来读，这次尝试不用翻译阅读，起初看地比较吃力，后来觉得越来越顺畅了。这本书从虚拟化、并发和持久化三个方面介绍，这种结构更容易把知识打穿，也是我选择这本书的原因。读了7个 chapter 也发现了几个问题，和群里的朋友们探讨了一下：
Q1: 获取系统时间(gettimeofday())是否会进行系统调用？ Switching Between Processes A Non-Cooperative Approach: The OS Takes Control
A timer device can be programmed to raise an interrupt every so many milliseconds; when the interrupt is raised, the currently running process is halted, and a pre-conﬁgured interrupt handler in the OS runs. At this point, the OS has regained control of the CPU, and thus can do what it pleases: stop the current process, and start a different one.</description></item><item><title>Weekly-20191124</title><link>/weekly/2019/11/24-weekly-20191124/</link><pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/11/24-weekly-20191124/</guid><description> 之前实习的时候写过一段时间的周报，最近觉得需要记录一下自己的生活和学习的过程，避免过地无所事事。所以在今天专门在博客上开了一个周报的 tab，这便是我个人的第一个周报，或者说是周记。
电脑终于到了，是19款13&amp;rdquo; 16+512的，新出的16&amp;rdquo;低配也是16+512套餐，看了看钱包只能安慰自己是为了便携度放弃了16&amp;rdquo;。
折腾了三年多，最后还是迁回 Hugo1 搭建博客，之前一直使用 Travis CI2 做 CD，但是很久没用遇到了 Travis 中 Hugo 下载失败的问题。联想 GitHub Actions 上线不久，调研了相关的静态博客方案后选择了 Hugo + GitHub Pages + GitHub Actions 的方案。参照 hugo-xmin3 主题加入代码高亮4和 disqus5 评论，修改了一些样式，最后完成了你现在所在的这个站点6。
完成了一家公司的二面，起初电话没有听清是哪家公司，后来询问业务才想起只有一家投递了这个部门。有两个多月没有面试过了，一些常见的面试题也忘得差不多。平时能展开滔滔不绝的问题也被面试官问：“你面试别的公司说话也这么简短吗”？其实这些问题根本算不上难，背一些面经也可以回答上来。对我来说合理的面试内容应该是深入挖掘底层基础，一些依靠背诵或阅读几篇文章就能达到同样效果的问题确实让人头疼。身边有相当一部分朋友后悔学习计算机相关专业，我深切地理解这种做着不感兴趣的事的无力感，同时也庆幸自己对计算机科学及行业的热爱。四年间接触过一些能力极强的朋友，不得让感慨：真正的大神还是兴趣驱动，而没有任何功利的想法。 图1，本科期间的一部分计算机相关书籍
在网上7下了不少的英文原版 pdf，起初是为了看 DDIA8 这本书，后来由于收集癖好将所有计算机方面的经典书籍都下了一遍放在 icloud 上。
胸口不舒服有一周了，周日去医院看了看，片子拍出来后大夫告知是熬夜导致的。以后不能熬夜了，待恢复几天后也要加强锻炼。
https://gohugo.io/ ↩ http://travis-ci.org/ ↩ https://github.com/yihui/hugo-xmin ↩ https://highlightjs.org ↩ https://disqus.com/ ↩ https://arjenzhou.github.io ↩ https://www.pdfdrive.com ↩ https://www.amazon.com/gp/product/1449373321/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=dataintensive-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=1449373321&amp;amp;linkId=7b365b768a6f6c8e5e397e48e30d435e ↩</description></item><item><title>我与开源——写在阿里巴巴编程之夏之后</title><link>/post/2019/08/29-%E6%88%91%E4%B8%8E%E5%BC%80%E6%BA%90%E5%86%99%E5%9C%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%8F%E4%B9%8B%E5%90%8E/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><guid>/post/2019/08/29-%E6%88%91%E4%B8%8E%E5%BC%80%E6%BA%90%E5%86%99%E5%9C%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%8F%E4%B9%8B%E5%90%8E/</guid><description>关于阿里巴巴编程之夏的介绍可以参考 AliOS-things 同学的文章 https://zhuanlan.zhihu.com/p/79863308
借秋招的一个间歇期，记录一下我的开源历程。算是对自己的人生阶段的一个记录。
从小学时使用开源软件成为受益者，到第一次到开源社区中成为贡献者，我用了十年。不求回报地默默贡献，得到他人的肯定便觉得欢欣雀跃，也许这就是开源的魅力所在。
图1，赵老师在 Jenkins 中文社区的发言
我第一次正式参与到开源项目中，是在去年的九月。
去年四月的时候，在上海有幸认识了家辉，我们当时便成为了朋友。也是通过他，我了解到了 GSoC。半年之后，觉得是开始套瓷的时间了，便想挑选几个社区来有针对性的交流。第一个关注的是 Apache 的 Kylin 社区，虽然主要开发者是中国人，但是方向和我期望的不太一样，所以后来没有选择它。后来在 GSoC-CN 中根据往年的申请情况，选择了 Jenkins 社区，巧合的是 Jenkins 中文社区刚刚成立，而 Jenkins 社区中活跃的参与者赵老师 @Rick 又是中国人，所以从九月到第二年的三月我便一直在 Jenkins 社区中做贡献，期间成为了 Jenkins-infra member。
图2，赵老师由 KK 宣布为最有价值参与者
转折发生在二月和三月。在年前我和赵老师提到过想申请他的 multibranch plugin，他也提醒过我多次要提早准备。但是我期间一直没有在其 gitter channel 中发言，二月的时候有一个印度的同学也参与到其中。同时在三月时春招受挫，和在蚂蚁的家纯学长聊了聊，决定放弃 GSoC，参与到 Kafka 中去。
图3，和学长的交流
四月的一个偶然机会，了解到 ASoC 的举办，而其中恰好有我想要深入学习的 Dubbo 社区，于是便在 issue 中留言。我没有马上得到回复，而我又不想错过这次机会，于是在 Jira 中留言、给社区发邮件、给导师发邮件、给 aliopensource 发邮件。久久没有得到回复的我有点绝望，当时又去接触了 Spring Cloud Alibaba 社区。后来乎兴老师在 Jira 中回复了我，@cvictory 也在 issue 中回复了我，aliopensource 和社区也都回复了我邮件，让我先写 proposal。有 GSoC 的经历，其实我的提案早就写完了，但是 ASoC 的提案描述相对来说不够具体，很难有针对性的给出解决方案，就这样踏上了漫长的交流之路&amp;hellip;</description></item><item><title>ESLint 规则的分析与修改</title><link>/post/2019/07/03-eslint-%E8%A7%84%E5%88%99%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E6%94%B9/</link><pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate><guid>/post/2019/07/03-eslint-%E8%A7%84%E5%88%99%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E6%94%B9/</guid><description>每个互联网大厂都有自己的编码规范，而对规范审查需要有代码扫描平台来对工程师的能力进行评估。在实习的两个月中，我负责的工作的一部分包括代码规范扫描方向，其中对 ESLint 以及 fecs 规则的修改及调整也包括在内。ESLint 在内部保留了一个仓库用于 JS 的规范检查，由于内部代码规范的问题，不可能直接将外部的拿来直接使用。对很少接触 JS 的我来说，npm 的包管理方式冗杂而烦乱，同时该模块是被集成在整个扫描平台中的，所以很少有有效的文档用来参考，通过不断地测试最后终于解决了该部分问题。
规则 no-new 要求 使用 new 关键字必须将其赋值给一个变量，如:
var Vue = new Vue({}) 而内部规范在 Vue 中可以不赋值
new Vue({}) 所以考虑对 ESLint 进行一些定制化配置。
查看官方文档无果之后，考虑找到开发人员，以下为交流过程：
arjenzhou: Hi, because I customized the rules, so I want to build and run eslint locally, what should I do?
platinumazure: @arjenzhou You should be able to install ESLint locally with npm install &amp;ndash;save-dev eslint, and then run with .</description></item><item><title>关于我</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>大连海事大学软件工程专业（2016-2020），曾就职于 SAP（实习）、百度（实习）
开源爱好者，尊敬且崇拜对计算机科学满怀热情且持续付诸行动的人。相信技术改变世界。
文章洁癖，不能忍受语法、词语、typo 以及标点符号的使用错误。
研究兴趣：Java 中间件、分布式共识机制
我的一些关于计算机、软件工程方面的问题会使用 github issue1 管理，找到较为合适的答案会在下面评论，欢迎认领。
https://github.com/arjenzhou/Questions-and-Answers/issues ↩</description></item></channel></rss>