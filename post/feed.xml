<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 2.1738e-319</title><link>/post/</link><description>Recent content in Posts on 2.1738e-319</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="/post/feed.xml" rel="self" type="application/rss+xml"/><item><title>记一次安卓逆向工程</title><link>/post/2020/02/01-%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><guid>/post/2020/02/01-%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</guid><description>起因 凌晨在 QQ 空间看到一个同校同学发布了一款 App，邀请别人参加内测。最近我也在帮朋友写一个小应用，便下载来研究一下。应用的主题很常见，主打校内论坛、交友功能，大概猜到是怎么回事，还是先抓包看看吧。
抓包 Charles 这个工具就不用说了，基本抓过包的朋友都用过。不过想要抓手机应用，前提要求手机和电脑在一个局域网络中。设置代理和安装证书这两个步骤很容易找到教程，这里不再赘述，需要注意的是 Android 7 以后按谷歌要求需要额外修改 APP 的网络安全性配置，我这里参考^这篇文章[https://mp.weixin.qq.com/s?__biz=MzU4MjgzNzk5MA==&amp;amp;mid=2247483695&amp;amp;idx=1&amp;amp;sn=020fe7fc09eec49ed84c7c111be105ce&amp;amp;chksm=fdb372a6cac4fbb09a2152a1e71da3d18ccc68e31cad0682565d7a3af3444b05269d95ae9edc&amp;amp;token=2000924864&amp;amp;lang=zh_CN#rd]得以解决。
抓到包之后看了一眼 Request 和 Response 格式，看上去不太规范，而且虽然加入了 token，但是很多接口没有鉴权。拿到接口直接请求就能修改所有用户的资料。由于是内测，我将开发者的昵称修改以提示其漏洞，同时也在内测群里反馈了。截止目前接口还没有修改。除此之外，修改密码等接口中的密码竟然是明文传输的，这让我不能不担心是否在数据库中也是明文存储密码？于是诞生了 hack 进数据库的想法。
调研 在处理数据库相关问题之前，我先判断出其应用的技术栈。初步判断后端是拿 php 写的，据我所知 php 框架经常爆出漏洞，在此基础之上发现是 thinkphp v5.0.24，而此版本已将漏洞修复了。此外又发现服务器上安装了宝塔面板，开发者开启了安全登录入口，默认的后台地址被修改了，这条路径也只能放弃了。
撞库 我之前没有接触过安全方面的技术，但是最简单的撞库的思想还是有的。在网上找了一些密码字典，一共包括 5000 个常用的密码，用 hydra1 暴力撞库，但是失败了。
SQL 注入 撞库失败后联想到 SQL 注入的方式，找到了 sqlmap2 这个工具，拿几个接口都测了一下，没有发现注入点。这条路也只能放弃。
逆向工程 既然服务端没有收获，那么就尝试从客户端入手。拿来 apk 解压得到 dex 文件，果然没有加壳。用 dex2jar3将其转成 jar，这里遇到一个问题4，GitHub 上最新的 release(2.1 or later) 已经解决。之后用 Java Decompiler5 打开 jar 查看源码。打开源码仔细查找后，奇怪地发现所有包都是导入的依赖，没有域名对应的包，也没有开发者编写的代码，这明显不合理。后来想到用 adb 来找当前栈顶 Activity。
adb shell dumpsys activity activities | sed -En -e &#39;/Running activities/,/Run #0/p&#39; 结果竟然是 uni.</description></item><item><title>我的2019</title><link>/post/2019/12/31-%E6%88%91%E7%9A%842019/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>/post/2019/12/31-%E6%88%91%E7%9A%842019/</guid><description> 今年各 App 年度报告发布地格外早，但这一年我也没有专注地使用哪一家的产品，也就只有 GitHub 三方报告里的那8万多行代码算得上是准确。2019年是求职的一年，但是亲人的离去给了我无穷的痛苦。这篇文章将以时间为线索总结我这一年以来的经历，以作纪念。
1月，也就是大三上学期期末正在和操作系统浴血奋战的时候。刚经历过第一次找实习碰壁，深知自己不足故对读研第一次有了想法，花了大概两个月的时间搞了比赛的项目1，同时晚上也随机地找两道算法题做一下，虽然最后比赛结果难以令人满意，此次项目经验在春招也派上了用场。
3月，入职 SAP。这段经历只能算得上是一个插曲，在这我没有任何归属感，也丝毫没有感受到公司的技术氛围，这坚定了我离职的想法，最终在6月离开了。
当我以为春招是4、5月时，它已经在3月悄然地拉开了帷幕。当时我自负地认为在同专业、乃至同校同届人的代码水平以及计算机基础都算得上拔尖，但是春招是与全国同届的本科生和研究生同台竞争。如井底娃的我自然受挫。自负的人往往在此情况更能激发出斗志，在被阿里、腾讯等大厂拒绝过之后潜心面向面试学习了三个月左右，在就要去中小厂实习的时候终于拿到了百度的 offer。当天直接把美团的面试拒绝了，这是我后悔的一点。
在同一个时间段，准备了半年的 GSoC(Jenkins) 也因为日后工作方向的原因放弃掉了。跟在蚂蚁的学长聊了聊并确定了学习路线，同时了解到了 ASoC(Dubbo) 并申请通过了。
6月19日，入职百度 EE。我不太喜欢这里的技术方向，但是导师关心，经理没有架子，同事关系融洽，我找不到更好的词语来形容这个氛围。但是工作了两个月我还是离职了，这完全出自我个人的原因，我不后悔拥有这段经历。
8月末，杭州，ASoC 的毕业典礼。很意外，除我之外18人中有一个是学长，还有一人是 Jenkins 社区中的朋友。遇到的人和他们的故事让我坚定了修炼技术的决心。
翌日，网易 HR 面。通过之后告知有加面（总监面），顺利通过。
9月，在学校投递了少数的大厂。无一例外全部 fail。做百度笔试（上海-基础架构研发）时收到了网易的正式 Offer，看到薪资之后下定决心考研。之后缺忘记了百度的测评。
10月9日，爷爷去世。放弃考研，安心补招。
直到12月，这期间笔试、面试过多家大厂，均失败（腾讯一面挂、阿里一面挂、头条一面挂、美团一面口头通过、挂，滴滴三面挂、快手一面挂、京东二面挂、拼多多笔试挂、AWS 笔试挂）。将近一年的战线让我疲惫不堪，想要放弃的心态让我不想准备面试。半年来读了许多书和文章，谁能想到最大的坎是在算法和一些可以被称为背诵的题目上。
直到今天，2019年的最后一天，我接到了百度 HR 的电话，老东家再次向我敞开了怀抱。这里面有多少是实习经历给我的加分？我不知道。 学海无涯，坚持读书、坚持代码、坚持刷题。让自己每天都有收获，这是我现在能够做的事。
明年我会在哪家公司？明年我会在哪个城市？谁知道呢，就让明天的我做决定吧。
https://github.com/arjenzhou/flashjob-server ↩</description></item><item><title>我与开源——写在阿里巴巴编程之夏之后</title><link>/post/2019/08/29-%E6%88%91%E4%B8%8E%E5%BC%80%E6%BA%90%E5%86%99%E5%9C%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%8F%E4%B9%8B%E5%90%8E/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><guid>/post/2019/08/29-%E6%88%91%E4%B8%8E%E5%BC%80%E6%BA%90%E5%86%99%E5%9C%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%8F%E4%B9%8B%E5%90%8E/</guid><description>关于阿里巴巴编程之夏的介绍可以参考 AliOS-things 同学的文章 https://zhuanlan.zhihu.com/p/79863308
借秋招的一个间歇期，记录一下我的开源历程。算是对自己的人生阶段的一个记录。
从小学时使用开源软件成为受益者，到第一次到开源社区中成为贡献者，我用了十年。不求回报地默默贡献，得到他人的肯定便觉得欢欣雀跃，也许这就是开源的魅力所在。
图1，赵老师在 Jenkins 中文社区的发言
我第一次正式参与到开源项目中，是在去年的九月。
去年四月的时候，在上海有幸认识了家辉，我们当时便成为了朋友。也是通过他，我了解到了 GSoC。半年之后，觉得是开始套瓷的时间了，便想挑选几个社区来有针对性的交流。第一个关注的是 Apache 的 Kylin 社区，虽然主要开发者是中国人，但是方向和我期望的不太一样，所以后来没有选择它。后来在 GSoC-CN 中根据往年的申请情况，选择了 Jenkins 社区，巧合的是 Jenkins 中文社区刚刚成立，而 Jenkins 社区中活跃的参与者赵老师 @Rick 又是中国人，所以从九月到第二年的三月我便一直在 Jenkins 社区中做贡献，期间成为了 Jenkins-infra member。
图2，赵老师由 KK 宣布为最有价值参与者
转折发生在二月和三月。在年前我和赵老师提到过想申请他的 multibranch plugin，他也提醒过我多次要提早准备。但是我期间一直没有在其 gitter channel 中发言，二月的时候有一个印度的同学也参与到其中。同时在三月时春招受挫，和在蚂蚁的家纯学长聊了聊，决定放弃 GSoC，参与到 Kafka 中去。
图3，和学长的交流
四月的一个偶然机会，了解到 ASoC 的举办，而其中恰好有我想要深入学习的 Dubbo 社区，于是便在 issue 中留言。我没有马上得到回复，而我又不想错过这次机会，于是在 Jira 中留言、给社区发邮件、给导师发邮件、给 aliopensource 发邮件。久久没有得到回复的我有点绝望，当时又去接触了 Spring Cloud Alibaba 社区。后来乎兴老师在 Jira 中回复了我，@cvictory 也在 issue 中回复了我，aliopensource 和社区也都回复了我邮件，让我先写 proposal。有 GSoC 的经历，其实我的提案早就写完了，但是 ASoC 的提案描述相对来说不够具体，很难有针对性的给出解决方案，就这样踏上了漫长的交流之路&amp;hellip;</description></item><item><title>ESLint 规则的分析与修改</title><link>/post/2019/07/03-eslint-%E8%A7%84%E5%88%99%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E6%94%B9/</link><pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate><guid>/post/2019/07/03-eslint-%E8%A7%84%E5%88%99%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E6%94%B9/</guid><description>每个互联网大厂都有自己的编码规范，而对规范审查需要有代码扫描平台来对工程师的能力进行评估。在实习的两个月中，我负责的工作的一部分包括代码规范扫描方向，其中对 ESLint 以及 fecs 规则的修改及调整也包括在内。ESLint 在内部保留了一个仓库用于 JS 的规范检查，由于内部代码规范的问题，不可能直接将外部的拿来直接使用。对很少接触 JS 的我来说，npm 的包管理方式冗杂而烦乱，同时该模块是被集成在整个扫描平台中的，所以很少有有效的文档用来参考，通过不断地测试最后终于解决了该部分问题。
规则 no-new 要求 使用 new 关键字必须将其赋值给一个变量，如:
var Vue = new Vue({}) 而内部规范在 Vue 中可以不赋值
new Vue({}) 所以考虑对 ESLint 进行一些定制化配置。
查看官方文档无果之后，考虑找到开发人员，以下为交流过程：
arjenzhou: Hi, because I customized the rules, so I want to build and run eslint locally, what should I do?
platinumazure: @arjenzhou You should be able to install ESLint locally with npm install &amp;ndash;save-dev eslint, and then run with .</description></item></channel></rss>