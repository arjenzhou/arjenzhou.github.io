<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on 0xab.de</title><link>/feed.xml</link><description>Recent content in Home on 0xab.de</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/feed.xml" rel="self" type="application/rss+xml"/><item><title>Week 15, 2020</title><link>/weekly/2020/04/12/week-15-2020/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/04/12/week-15-2020/</guid><description>我宣布，这周放假一周。</description></item><item><title>Week 14, 2020</title><link>/weekly/2020/04/05/week-14-2020/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/04/05/week-14-2020/</guid><description> 翻译了一篇 Is redlock safe Leetcode 还是捡起来了 找了本小说看 毕设打算拿之前的，不重新写了 估计下个月才能开学 SQL 忘得有点多</description></item><item><title>Is Redlock safe?</title><link>/translation/2020/04/04/is-redlock-safe/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>/translation/2020/04/04/is-redlock-safe/</guid><description>分布式系统研究者 Martin Kleppmann 昨天发布了一篇 Redlock (http://redis.io/topics/distlock) 的分析文章1。
Redlock 是我设计用于 Redis 的客户端分布式锁定算法。该算法编排了一组客户端节点，这些节点实现了具有特定功能的数据存储，以便创建一个多主容错的、安全的、具有自动释放功能的分布式锁。 你可以使用 MySQL 而非 Redis 来实现 Redlock。
该算法的目的是将那些还在使用单点 Redis 还有带有故障转移的主从设置的人员转移到更可靠、更安全的方法上来实现分布式锁。该方法具有非常低的复杂性和良好的性能。
自从我发布 Redlock 以来，人们就以多种语言实现了该功能并将其用于不同的目的。
Martin 对这个算法的分析结论是 Redlock 不安全。我在最初的 Redis 规范2中请求帮助分析，很高兴 Martin 发布了一个分析文章。非常感谢 Martin，尽管我不同意他的观点。好处是，与其他编程领域不同，分布式系统在数学上是非黑即白的。因此，某种算法要么可以保证给定的属性集，要么在某些假设下算法可能会无法保证它们。在此分析中，我将分析 Martin 的分析，以便该领域的其他专家可以检查这两个文档（分析和反分析），最终我们可以了解 Redlock 是否被认为是安全的。
为什么 Martin 认为 Redlock 不安全 分析中的论点主要有两个：
具有自动释放特性的分布式锁（互斥锁属性只在锁被获取后的固定时间内有效）需要一种方法来避免客户端在过期时间后使用锁时引发的问题，这违反了访问共享资源时的互斥性。Martin 说 Redlock 没有这样的机制。
Martin 说，不管问题1如何，这个算法本质上是不安全的，因为它对系统模型做出的假设在实际系统中无法得到保证。
为了清楚起见，我将从第一个问题开始，分别讨论这两个问题。
分布式锁、自动释放和令牌 没有自动释放机制（锁的拥有者将无限期地持有它）的分布式锁基本上是没用的。如果持有锁的客户端崩溃，并且在短时间内无法恢复到完全状态，就会导致死锁，因为分布式锁试图保护的共享资源永远无法访问。这就产生了一个在大多数情况下都无法接受的活性问题，所以一个正常的分布式锁必须能够自动释放自己。
实际上锁提供给客户端最长的生存时间。在过期时间之后，互斥保证（锁的*主要*属性）就没有了：另一个客户端可能已经有了锁。如果两个客户端在两个不同的时间获得锁，但第一个因为 GC 暂停或其他调度问题非常慢，会尝试与获得锁第二个客户端在共享资源的情况下同时工作吗？
Martin 说，通过让分布式锁服务器为每个锁提供令牌可以避免此问题。在他的示例中，令牌只是保证始终递增的数字。Martin 使用令牌的理由是：当两个不同的客户端同时访问锁定的资源时，我们可以在数据库写入事务时使用令牌（假定可以实现客户端所做的工作）：只有具有最大锁号的客户端才可以写入数据库。
用 Martin 的话来说：
“这种问题的解决方案非常简单：你需要在每个对存储服务的请求中携带一个 fencing token。在此情况下，一个 fencing token 只是一个客户端获得一次锁时递增的数字（如被锁服务递增）。”</description></item><item><title>Google File System</title><link>/article/2020/03/google-file-system/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>/article/2020/03/google-file-system/</guid><description>GFS 是谷歌开发的分布式文件系统，也是上一篇 MapReduce 最终输出文件的存放位置。
设计概述 以下内容简述了 GFS 的设计架构。包括系统的的细节，以及如此设计的原因。
假设 该系统在以下前提设计实现：
该系统由许多机器组成，这些机器经常会出错。所以系统必须持续检测以便能够检查、容忍错误，并且能够恢复回来。 该系统支持小型文件，但是不会对其作出优化。 关注性能的应用经常对一批读操作进行排序，以便提高性能。 在文件写入之后，很少会再次修改。 系统必须高效地处理好并发问题。 高且平稳的带宽比低延迟重要。 接口 GFS 提供了和文件系统类似的接口。文件以文件路径名严格组织。除了传统的 CRUD 之外，GFS 还提供了快照和 record append。快照能高效地复制一个文件或目录，record append 用来解决多个客户端的并发问题。
架构 一个 GFS 集群包括一个 master 和多个 chunkserver，同时 master 可以被多个 client 访问到。如图一。 文件通常被分为固定大小的 chunk 。在 chunk 被创建时，master 分配给它一个64位全局常量 *chunk handle *。 chunkserver 将 chunk 作为 linux 文件存储在本地磁盘，并且根据 chunk handle 和字节区间进行读写。每个 chunk 在多个 chunkserver 上都有冗余。
master 上保存了所有文件系统的元数据。包括命名空间，访问控制信息，文件到 chunk 的映射和 chunk 的位置。也控制像 chunk 租约，孤儿 chunk 的 GC，chunkserver 之间的 chunk 迁移等系统活动。master 还定期向 chunkserver 发送心跳包收集其状态。 client 与 master 交互来操作元数据，而对数据的操作直接与 chunkserver 通信。 client 和 chunkserver 都不缓存文件数据。一般对客户端来说，文件都太大了。而得益于 linux buffer cache，chunkserver 也不用再做缓存了（linux 会将访问的磁盘文件缓存在内存里）。</description></item><item><title>Week 13, 2020</title><link>/weekly/2020/03/29/week-13-2020/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/03/29/week-13-2020/</guid><description>大概读完了 GFS 的论文。细节太多，加上读英文原文的需要的精力太大，所以用了很长时间。如果想要实现简单的估计要考虑的更多，不过估计会是给 HDFS 贡献一些代码。
leetcode 第二轮差不多做了130多道题，的的确确不太想做了，估计这几天就是尾声了。
翻以前的周报可能会发现这次改成了中文，因为词汇量匮乏太严重了。当然阅读没有问题，只是到写的时候难免想不到特别贴地气的表达方式。
放了一个多月的贴膜游戏干到星耀3了。除了毕设不想做，实在是没事情做，不过明天必须得开始了&amp;hellip;下周，也就是明天大概看看Hadoop MapReduce 源码，无论是工作内容还是6.824都与之强相关，bigtable 可能会放在 Raft 之后进行，不过 Raft 已经看过很多遍了，这次应该不会消耗很多时间。</description></item><item><title>Week 12, 2020</title><link>/weekly/2020/03/22/week-12-2020/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/03/22/week-12-2020/</guid><description>The winter vacation homework completed at Monday.
Google MapReduce paper have completed for weeks, the GFS and Bigtable were in the schedule. Excpet to the consensus algorithms, it seems that not too difficult. So next stage is to implement a simple MapReduce system.
It is a torment to wait for going to school. 快开学吧。</description></item><item><title>Google MapReduce</title><link>/article/2020/03/google-map-reduce/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>/article/2020/03/google-map-reduce/</guid><description>无论是出于对分布式系统的兴趣，还是对一个未来的 Hadooper 来说，这篇论文都值得一读。号称为 Google “三驾马车”之一，同时也作为6.824 LEC 1的 preparation, 其重要性也随之体现。趁着时间充裕，抓紧读了读并尝试着手进行后面的 lab。
概念 Google 提出了一种 Map-Reduce 的模型。map 将一对键值对处理成另外一组中间键值对， reduce 将这些中间键值对中 key 相同的合并起来。 系统关注的除了处理数据本身之外，还有调度机器之间程序的运行、处理机器故障以及管理机器之间的通信。
编程模型 就如前面提到的，用户编写的 Map 将所有的输入处理成中间状态的键值对，MapReduce 根据中间状态的 Key 将其整理到一起（因为数据在不同的机器上），并将其交给 Reduce。
之后，同样是用户编写的 Reduce 将 Key 相同的中间键值对合并到一起。合并的数据集可能只是一小部分。
下面是一个单词计数的例子：
map (String key, String value) // key document name // value document content for each word w int value: EmitIntermediate (w, &amp;quot;1&amp;quot;); reduce (String key, Iterator value) // key a word // values a list of counts int result = 0; for each v in values: result += ParseInt (v); Emit(AsString (result)); map 函数将出现过的单词与其出现过的次数相关联，这里是1。 reduce 函数将相同单词出现的次数求和。</description></item><item><title>Week 11, 2020</title><link>/weekly/2020/03/15/week-11-2020/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/03/15/week-11-2020/</guid><description>Homework of winter vacation distributed by netease is approaching to the end.
netease-erver1 is written with Spring Boot, which I have used for 3 years. This time I wrote detailed mocking tests which never had before. To simplify the logic, I reduce the progress of the system. From design to completeing it, less than 4 days (I don&amp;rsquo;t want to write it till the deadline.) were used. Most of the time costed by writting test cases.</description></item><item><title>Week 10, 2020</title><link>/weekly/2020/03/08/week-10-2020/</link><pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/03/08/week-10-2020/</guid><description>I am in a dilemma at learning rust or golang, which I know a litte for the sake of labs. Matering in a specific language or, broading my skill stack is an equivalent puzzle. I have too little vigor to dig into much knowledge, like what Chuang Tzu said,
&amp;ldquo;吾生也有涯，而知也无涯。以有涯隨无涯，殆已；已而為知者，殆而已矣。為善无近名，為惡無近刑。緣督以為經，可以保身，可以全生，可以養親，可以盡年1。&amp;rdquo;
Though do not agree with part of the view of Chuang Tzu, I must admit no one can gain all knowledge in the world.</description></item><item><title>莊子/內篇/養生主第三</title><link>/reproduction/2020/03/the-fundamentals-for-the-cultivation-of-life/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate><guid>/reproduction/2020/03/the-fundamentals-for-the-cultivation-of-life/</guid><description>吾生也有涯，而知也无涯。以有涯隨无涯，殆已；已而為知者，殆而已矣。為善无近名，為惡無近刑。緣督以為經，可以保身，可以全生，可以養親，可以盡年。
　庖丁為文惠君解牛，手之所觸，肩之所倚，足之所履，膝之所踦，砉然嚮然，奏刀騞然，莫不中音。合於桑林之舞，乃中經首之會。
　文惠君曰：「嘻，善哉！技蓋至此乎？」
　庖丁釋刀對曰：「臣之所好者，道也，進乎技矣。始臣之解牛之時，所見无非全牛者。三年之後，未嘗見全牛也。方今之時，臣以神遇而不以目視，官知止而神欲行。依乎天理，批大郤，導大窾，因其固然。技經肯綮之未嘗，而況大軱乎！良庖歲更刀，割也；族庖月更刀，折也。今臣之刀十九年矣，所解數千牛矣，而刀刃若新發於硎。彼節者有間，而刀刃者无厚；以无厚入有間，恢恢乎其於遊刃必有餘地矣，是以十九年而刀刃若新發於硎。雖然，每至於族，吾見其難為，怵然為戒，視為止，行為遲。動刀甚微，謋然以解，如土委地。提刀而立，為之四顧，為之躊躇滿志，善刀而藏之。」
　文惠君曰：「善哉！吾聞庖丁之言，得養生焉。」
　公文軒見右師而驚曰：「是何人也？惡乎介也？天與，其人與？」曰：「天也，非人也。天之生是使獨也，人之貌有與也。以是知其天也，非人也。」
　澤雉十步一啄，百步一飲，不蘄畜乎樊中。神雖王，不善也。
　老聃死，秦失弔之，三號而出。
　弟子曰：「非夫子之友邪？」
　曰：「然。」
　「然則弔焉若此，可乎？」
　曰：「然。始也吾以為其人也，而今非也。向吾入而弔焉，有老者哭之，如哭其子；少者哭之，如哭其母。彼其所以會之，必有不蘄言而言，不蘄哭而哭者，是遁天倍情，忘其所受，古者謂之遁天之刑。適來，夫子時也；適去，夫子順也。安時而處順，哀樂不能入也，古者謂是帝之縣解。」
　指窮於為薪，火傳也，不知其盡也。</description></item><item><title>Week 9, 2020</title><link>/weekly/2020/03/01/week-9-2020/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/03/01/week-9-2020/</guid><description>I&amp;rsquo;m thinking about pausing the daily algorithms but starting the weekly contest&amp;hellip;just thinking.
I sware it is my last time to shut down my process on android development, spending time on meaningful aspects is my future task.
It was my first practice on TDD and got a lot of improvement in programming skills. This can help me write robust code and prevent myself from waterfall-like midification. Later days from now, though dislike but must write some front-end code to complete my task distributed by my company.</description></item><item><title>Week 8, 2020</title><link>/weekly/2020/02/23/week-8-2020/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/02/23/week-8-2020/</guid><description>Approached to 100 solutions in this phase, I feel a bit bored with the leetcode problems. As what I want to handle with is the project something like infrastructure, platform&amp;hellip;With the ending up the development of service for a Android application, a conclusion was drawed: I hate monotonous crud bussiness. It is always a good symbol to find ones ambiton like what the motto in the homepage goes:
Adhere to the technological belief, be pragmatic, self-motivated, take responsibility to the end and fulfill others.</description></item><item><title>Week 7, 2020</title><link>/weekly/2020/02/16/week-7-2020/</link><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/02/16/week-7-2020/</guid><description>Till now 89 problems in leetcode were sloved in this phase, 7 in this week as usual.
MIT 6.824: Distributed Systems requires a precondition that reading through the Google MapReduce paper. I finished it and ready to start this course. The CMU 15-213 course was put on hold because I have some basic related and now former is an emphasis.
These days I wrote some bussiness code that makes me collapse.</description></item><item><title>Solution for switching between lowercase and Chinese pinyin with Caps Lock in Jetbrains IDEs</title><link>/article/2020/02/solution-for-switching-pinyin-ime-state-in-jbs/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><guid>/article/2020/02/solution-for-switching-pinyin-ime-state-in-jbs/</guid><description>TL;DR:
Add TICapsLockLanguageSwitchCapable - true to your input method&amp;rsquo;s Info.plist[1]
Background Last month I encountered a problem with Chinese input method (Rime, Baidu, Sogou, etc), the symptoms is that I couldn&amp;rsquo;t switch between pinyin and lowercase letters with the Caps Lock which can pressed by my little finger in Jetbrains IDEs, which has been my habit since I used macOS.
Before using third-party input methods, it works well with apple pinyin method.</description></item><item><title>Week 6, 2020</title><link>/weekly/2020/02/09/week-6-2020/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/02/09/week-6-2020/</guid><description>It is a milestone for me to build my site with English, which inspires me to improve my level at this language. Ever after now, I write articles in English, twitte in English and read original professional articles (what I have done, in fact).
This week, I
sloved 7 algorithm questions in leetcode, 81 questions totally this phase. translated 2 articles, one for distributed systems, one for experience of learning english.</description></item><item><title>English has been my pain for 15 years</title><link>/translation/2020/02/04/english-has-been-my-pain-for-15-years/</link><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate><guid>/translation/2020/02/04/english-has-been-my-pain-for-15-years/</guid><description>Paul Graham 提出了一个很重要的问题：英语作为 IT 工作者的必备语言之一，始终受新闻站点和软件开发者的关注1。当他提到“外国口音”时引起了很大的争议，因为互联网上到处都是看热闹不嫌事大的人，但这是问题中最无聊的部分，因此我将跳过这一部分。重要的是，通常没有人会谈论“英语问题”，而一想到这点我总是感到有点孤独，就像是这是一个只影响我一个人的问题似的，所以我想在这篇文章中分享我有关学习英语的经历。
一个长故事 回到1998年，我一直记得当时我们正在研究一个网络攻击，我和 sullivan 在我米兰的家中喝醉了之后，把我们得到的可怜的结果发布在了 BUGTRAQ 用户能够理解的帖子中。
请注意第二句中的 “Instead all others”。虽然现在我的英语水平也不高，但是我确实在15年中有所进步，而且 sullivan 现在在美国和英国的大学任教，所以我认为他有一口非常流利的英语（剧透警告：我并没有）。但是重点是：我们正在进行研究新的 TCP/IP 攻击，但是我们无法用英语撰写关于这个技术的文章。在1998年，我无法沟通这一事实就已经使我感到举步维艰，如果我不花很多精力的话就无法阅读用英语撰写的技术文档，所以我用了大脑50％的精力的单纯用来读，而剩下的精力用来理解我正在读什么。
但是我一直认为英语是个好东西。我总建议人们不要翻译技术的主题，因为我认为有一个通用的语言来注释源码会更好，并且实际上对于大多数人来说，理解用英语写的技术文档非常简单。
因此，从1998年开始，我逐渐学会了流利地阅读英语，与阅读意大利语相比无需付出更多的努力。 我甚至能够用意大利语写东西的速度来写英语，虽然这只达到了最低的标准，就如你在阅读这篇文章时所看到的：基本上，我学会了非常快地写一小段英语，虽然通常不足以表达我在编程领域的想法，但是写一般的主题已经足够了。我不知道大多数厨房里的物件对应的单词，也不会表达复杂句子、假设结构的语法。但是现在，我可以轻松地就自己最关心的主题进行交流，并且其他人可以或多或少地理解我写的内容，因此需要提高英语的压力大大减轻了……但是，我最近发现，这只是我遇到的次要问题。
欧式英语，有趣的语言 尽管我最终能够在写作和阅读方面达到自己的要求，但是我几乎从未在一个讲英语的国家体验过真正的交流。在此之前，我总是与其他欧洲（除了英国）人一起使用英语交流，例如法国，德国和西班牙人。
现在这些国家/地区使用的英语是在英语学校上课时使用的英语&amp;hellip;从语音上讲，它几乎与美国或英国英语无关。他们说这是“BBC英语”，但实际上不是。这是使用英国英语语法而在语音上大大简化的英语。
那个版本的英语，实际上能让世界各地的人们都可以轻松交流。基本语法很容易掌握，几个月的练习后就可以进行交谈。在欧洲所有非英语国家中，单词的发音几乎相同，因此效果很好。
只有一个问题，它与在英国，美国，加拿大和其他以英语为母语的国家/地区所说的英语一点关系也没有。
毕竟，英语有点蹩脚 现在我要告诉你们一个秘密，除了没有人在英语与世界对比的语境中说：从语音上讲，英语是一种支离破碎的语言，其他的都不是秘密2。在意大利，我们历史悠久，但政治统一很晚。不同地区使用不同的方言，人们的口音非常重。在1950年“电视语言统一”之前，每个人都在说“方言”，而意大利语只被一小部分人掌握。西西里语是我们家族说得最多的语言，它比意大利语要早几个世纪。
尽管如此，所有人都能听得懂另一个地区甚至是瑞士人说的话。意大利语在语音上是世界上最简单的语言之一，而且充满了冗余。事实上，它的信息熵很低，通常单词很长，每个单词中都有辅音和声母的很好的混合。一个单词的发音没有特别的规则，如果你知道每个字母的发音和一些特殊的字母组合的声音，比如“gl”，“sc”，你第一次读它们基本上就可以99.9%地正确发音。
来自不同英语国家的人在交流方面存在问题，这一点已经充分说明了英语语音有多么奇怪。例如，对我和其他许多非英语母语人士来说，很难理解一个英国人到底在说些什么，而听懂北美人通常要简单得多。
对我来说，正是由于英语的这种“特点”，我的问题不仅仅在于我的口音，而是能够理解人们在说什么。如果我付出足够的努力，口音根本不算是个问题。恕我直言，Paul Graham 提到的“口音”问题是英美人在这方面的一种消极态度，嗨，伙计们，你不了解我们，我们也听不懂你说的话，很难找到“只要你的理解力很有限，就会试图减慢对话的速度”这样的人。即使我说我听不懂，他们也会以光速的重复同样的话。
第一次接触书面英语是致命的 在我看来，学习英语如此缓慢的一个原因是从未听过英语就开始阅读英语。我的大脑充满了文字和有趣的声音之间的关联，而这些关联在实际语言中是不存在的。我的建议是，如果你现在正在学习英语，尽快开始听英语口语。
osx 的 “say” 程序是一个很好的助手，它能够以一种合适的方式说出大多数英语单词。学习一个新单词一定要先学习它的发音。
内向还是外向？ 在我的英语学习经历中，最令我震惊的一件事是，不精通一门语言会让你变成一个内向的人。我是一个性格外向的人，在意大利那里大多数人都是性格外向的，在西西里岛那里有更多的性格外向的人，在我的家庭里大部分人都是性格外向的人。我认为我是一个有点惹人注意的人（我希望我不是，但是实际上我是一个非常外向的人）。现在由于沟通障碍，当我必须用英语交谈时，我就不是一个外向的人了，每次我去开会或被介绍给别人时，我都会感到后悔。这是一场噩梦。
为时已晚，让我们学习英语吧 我认为英语只是语法上简单，但作为通用语言不是好的选择。但是事实是它已经赢了，已经改变不了了，更好地讲英语是一个好主意，即使这意味着要付出很多努力。这就是我自己在做的事，我正在努力改变。
我发现自己确实需要提高英语水平的另一个原因是，十年后，我可能不再会专业编写代码，而合理的选择是转换到 IT 的管理方面，或者去掌管不用写很多代码的大型项目。如果你认为作为开发人员需要会英语的话，那么即使在传统的 IT 公司的其他部门工作，也需要会更多的英语，即使“只是”要管理许多程序员。
但是以英语为母语的人应该真正意识到，很多人正在认真学习一种难学的语言：这不是一种爱好，掌握英语是很多人为简化沟通作出的很大努力。只要停止交谈/聆听几周英语，就要重新学了。
我的长期愿望是，不同的口音迟早会融合成一种标准的、易于理解的口音，让说英语的人可以把它作为一种通用语言。
http://paulgraham.com/accents.html ↩ Now I&amp;rsquo;ve a secret for you, that is everything but a secret except nobody says it in the context of English VS The World: English is a broken language, phonetically.</description></item><item><title>How to do distributed locking</title><link>/translation/2020/02/03/how-to-do-distributed-locking/</link><pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate><guid>/translation/2020/02/03/how-to-do-distributed-locking/</guid><description>我在 Redis 的官网上偶然发现了一个叫做 Redlock 的算法，恰好与我的书研究的一部分相关。这个算法自称能在 Redis 上实现容错的分布式锁（准确地说是租约[1]），并向研究分布式系统的人征求意见。看见这个算法，我出于本能地在脑海里敲响了警钟，所以我花了些时间来思考并且写下了这些笔记。
因为已经有十多个 Redlock 的实现了，并且我们不知道谁已经使用这个算法了。所以我认为值得把我的笔记公开分享出来。我不会深入探讨 Redis 的其他部分，因为那些已经在其他地方讨论过了。
在我深入 Redlock 的细节之前，首先要声明我十分喜欢 Redis，并且已经在生产环境中成功地使用过它了。我认为它非常适合在服务器之间共享一些频繁变化的数据，而且偶尔丢失部分数据也无关紧要。例如，维护每个 IP 地址的请求计数器（出于限制的目的）和每个用户 ID 的不同 IP 地址集（用于滥用的检测）。
然而，Redis 已经逐渐进入有强一致性和持久性特点的数据管理领域，这让我很担心，因为这不是 Redis 设计的初衷。有争议的是，分布式锁也属于这一领域。让我们更详细地研究一下。
你用锁来干什么 锁的目的是用来保证当多个节点尝试做相同的工作时，实际上只有一个节点能够完成（至少在同一时刻只有一个）。这个工作可能是将一些数据写入一个共享的存储系统、完成一些计算、调用一些外部的 API 或者其他类似的工作。宏观上来看，有两个原因来说明为什么在一个分布式应用中需要一个锁：效率和正确性[2]。为了区别这些情况，可以继续往下看当锁失效的时候会发生什么：
效率：使用锁可以避免做不必要的重复工作（例如一些代价昂贵的计算）。如果锁失效时两个节点做相同的工作，结果会是成本略有增加（最后要比其他方式多给 AWS 支付5美分）或带来小小的不便（用户可能会收到两个相同的邮件通知）。 正确性：使用锁可以避免并发进程相互影响最终搞乱系统的状态。如果锁失效时两个节点同时处理同一部分数据，结果可能造成文件损坏、数据丢失、永久的不一致性、给病人服用了错误剂量的药物或其他严重的问题。 以上两点都是需要锁的有效情况，但是你需要十分明确你是在处理哪一种情况。
我的观点是：如果只是出于提高效率的目的，那么没有必要承担 Redlock 的成本和复杂的逻辑，你没必要运行5台 Redis 实例来检查是否有大多数都获得了锁。你最好只启动一个 Redis 实例，或是当主节点崩溃时异步复制到从节点。
如果你使用单个 Redis 实例，在 Redis 节点断电时当然会丢失一些锁，同时可能会出现一些问题。但是如果你使用这些锁来优化效率的话，其实节点的崩溃不会频繁发生，这也没什么大不了。这个“没什么大不了”的正是 Redis 的特点。至少当你依赖于一个 Redis 实例的时候，每个查看系统的人都心知肚明这些锁不太严谨，仅用于不太关键的目的。
另一方面，具有5个副本和多数投票的 Redis 算法乍一看似乎适用于对正确性要求很高的情况。在接下来的几个章节中我将论证它不适用于这个目的。文章的其余部分假定你的锁对保障系统的正确性至关重要，并且两个节点持有同一个锁是严重的错误。
使用锁来保护资源 先把 Redlock 的具体应用放在一边，讨论一下通常一个分布式锁是如何使用的（不依赖于某个加锁算法）。要牢记住分布式系统中的锁和多线程应用中的互斥量不一样，这一点很重要。由于不同的节点和网络都能以各种奇葩的方式发生故障，所以它更让人觉得可怕。
假如你有一个应用，其中客户端需要更新共享存储中的文件（如 HDFS 或 S3）。一个客户端首先获得一个锁，然后读取这个文件，作出一个修改，将改动写回，最终释放这个锁。这个锁避免两个客户端并发执行读-修改-写这一系列动作以防丢失更新。代码可能像下面这样：
// THIS CODE IS BROKEN function writeData(filename, data) { var lock = lockService.</description></item><item><title>Week 5, 2020</title><link>/weekly/2020/02/02/week-5-2020/</link><pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/02/02/week-5-2020/</guid><description> 7 道题。 某贴膜游戏混到钻二了。 今天是回文日20200202。 扒了一个应用，参见昨天的文章。 换了新域名 0xab.de，a 旋转180度是 e，b 镜像对称是 b，而且还是个十六进制的数。 明天曹教授就要主持试药了，希望能有好的结果。</description></item><item><title>A note of android reverse engineering</title><link>/article/2020/02/reverse-engineering/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><guid>/article/2020/02/reverse-engineering/</guid><description>起因 凌晨在 QQ 空间看到一个同校同学发布了一款 App，正在邀请别人参加内测。正巧最近我也在帮朋友写一个小应用，便下载来研究一下。应用的主题很常见，主打校内论坛、交友功能，大概猜到是怎么回事，还是先抓包看看吧。
抓包 Charles 这个工具就不用说了，基本抓过包的朋友都用过。不过想要抓手机应用，前提要求手机和电脑在一个局域网络中。设置代理和安装证书这两个步骤很容易找到教程，这里不再赘述。需要注意的是 Android 7 以后按谷歌要求需要额外修改 APP 的网络安全性配置，我这里参考这篇文章1得以解决。
抓到包之后看了一眼 Request 和 Response 格式，看上去不太规范。而且虽然加入了 token，但是很多接口没有鉴权，拿到接口直接请求就能修改所有用户的资料。由于是内测，我将开发者的昵称修改以提示其漏洞，同时也在内测群里反馈了，截止目前接口还没有修改。除此之外，修改密码等接口中的密码竟然是明文传输的，这让我不能不担心是否在数据库中也是明文存储密码？于是诞生了 hack 进数据库的想法。
调研 在处理数据库相关问题之前，先判断出其应用的技术栈。后端是拿 php 写的，而据我所知 php 框架经常爆出漏洞，在此基础之上发现是 thinkphp v5.0.24，而此版本已将漏洞修复了。此外又发现服务器上安装了宝塔面板，开发者开启了安全登录入口，默认的后台地址被修改了，这条路径也只能放弃了。
撞库 我之前没有接触过安全方面的技术，但是最简单的撞库的思想还是有的。在网上找了一些密码字典，一共包括5000多个常用的密码，用 hydra2 暴力撞库，但是失败了。
SQL 注入 撞库失败后联想到 SQL 注入的方式，找到了 sqlmap3 这个工具。拿几个接口都测了一下，没有发现注入点这条路也只能放弃。
逆向工程 既然服务端没有收获，那么就尝试从客户端入手。拿来 apk 解压得到 dex 文件，果然没有加壳。用 dex2jar4将其转成 jar。这里遇到一个问题5，在 GitHub 上最新的 release(2.1 or later) 已经解决。之后用 Java Decompiler6 打开 jar 查看源码。仔细查找后，奇怪地发现所有包都是导入的依赖，没有域名对应的包，也没有开发者编写的代码。这明显不合理。后来想到用 adb 来找当前栈顶 Activity 的方法。
adb shell dumpsys activity activities | sed -En -e &#39;/Running activities/,/Run #0/p&#39; 结果竟然是 uni.</description></item><item><title>Week 4, 2020</title><link>/weekly/2020/01/26/week-4-2020/</link><pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/01/26/week-4-2020/</guid><description> leetcode 7道题。 春节快乐。 和网易的导师联系上了，入职后做大数据相关。 帮朋友接了个活，拾起了多年不写的安卓。 明显感觉到比前两年的代码能力强多了。 肺炎情况挺严重的，希望全国人民能早日战胜病毒。 Netty user doc 发现了个问题1，一直没能得到解决。 https://stackoverflow.com/questions/59843899/why-did-not-call-ctx-flush-after-ctx-write-is-called-at-netty-user-guide/59843976#59843976 ↩</description></item><item><title>Week 3, 2020</title><link>/weekly/2020/01/19/week-3-2020/</link><pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/01/19/week-3-2020/</guid><description> leetcode 刷到60题了，刷了忘、忘了刷。 又拒了百度 offer，方向和期望不匹配是放弃的一个重要因素。投了其他部门，希望能三进宫。 terminal 从 fish 换回 zsh。 大概了解了 IM 的整体架构设计，复习下 Netty 的 API，打算拿来写毕设（OS 有点难度。 了解到在 IDE 里用 vim 键位的套路，有时间尝试一下。</description></item><item><title>Week 2, 2020</title><link>/weekly/2020/01/12/week-2-2020/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/01/12/week-2-2020/</guid><description> 写了8道题，47-54。 学习了一些关于 IM 架构1及相关技术的文章2 猪场发新年礼物了。 开了一个译物的专栏，用于翻译一些优秀的文章。目前还没有文章翻译过了，所以暂时404。 又把微博卸载了，不知道能挺多久&amp;hellip; https://yq.aliyun.com/articles/698301 ↩ http://www.52im.net/ ↩</description></item><item><title>Week 1, 2020</title><link>/weekly/2020/01/05/week-1-2020/</link><pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate><guid>/weekly/2020/01/05/week-1-2020/</guid><description> 新年快乐 想用 rust 写一个 OS，引出了学习 rust 和汇编的前置条件。 最后决定重新看一遍 CS:APP，实习的时候大略看过一遍这本，这次跟着 CMU 15-2131学习。 做 lab0 时候决定重新看一下 C programing language，这个调用栈看起来不浅。 补了老东家的测评和笔试。笔试选择比较刁钻，但是差不多都会；算法憋了一个小时一个没过，最后实在不行第一题 int 改成 long 两行解决，第二题 Java 换 Python 思路一点儿都没改，第三题暴力 BFS 三道全 Accept&amp;hellip; 这周刷了八道题，敢敢单单 附:
ICS 课程视频2
CS:APP labs3
http://www.cs.cmu.edu/~213/schedule.html ↩ https://www.youtube.com/playlist?list=PLbY-cFJNzq7z_tQGq-rxtq_n2QQDf5vnM ↩ http://csapp.cs.cmu.edu/3e/labs.html ↩</description></item><item><title>Summary of the year of 2019</title><link>/article/2019/12/summary-of-the-year/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>/article/2019/12/summary-of-the-year/</guid><description> 今年各 App 年度报告发布地格外早，但这一年我也没有专注地使用哪一家的产品，也就只有 GitHub 三方报告里的那8万多行代码算得上是准确。2019年是求职的一年，但是亲人的离去给了我无穷的痛苦。这篇文章将以时间为线索总结我这一年以来的经历，以作纪念。
1月，也就是大三上学期期末正在和操作系统浴血奋战的时候。刚经历过第一次找实习碰壁，深知自己不足故对读研第一次有了想法，花了大概两个月的时间搞了比赛的项目1，同时晚上也随机地找两道算法题做一下，虽然最后比赛结果难以令人满意，此次项目经验在春招也派上了用场。
3月，入职 SAP。这段经历只能算得上是一个插曲，在这我没有任何归属感，也丝毫没有感受到公司的技术氛围，这坚定了我离职的想法，最终在6月离开了。
当我以为春招是4、5月时，它已经在3月悄然地拉开了帷幕。当时我自负地认为在同专业、乃至同校同届人的代码水平以及计算机基础都算得上拔尖，但是春招是与全国同届的本科生和研究生同台竞争。如井底娃的我自然受挫。自负的人往往在此情况更能激发出斗志，在被阿里、腾讯等大厂拒绝过之后潜心面向面试学习了三个月左右，在就要去中小厂实习的时候终于拿到了百度的 offer。当天直接把美团的面试拒绝了，这是我后悔的一点。
在同一个时间段，准备了半年的 GSoC(Jenkins) 也因为日后工作方向的原因放弃掉了。跟在蚂蚁的学长聊了聊并确定了学习路线，同时了解到了 ASoC(Dubbo) 并申请通过了。
6月19日，入职百度 EE。我不太喜欢这里的技术方向，但是导师关心，经理没有架子，同事关系融洽，我找不到更好的词语来形容这个氛围。但是工作了两个月我还是离职了，这完全出自我个人的原因，我不后悔拥有这段经历。
8月末，杭州，ASoC 的毕业典礼。很意外，除我之外18人中有一个是学长，还有一人是 Jenkins 社区中的朋友。遇到的人和他们的故事让我坚定了修炼技术的决心。
翌日，网易 HR 面。通过之后告知有加面（总监面），顺利通过。
9月，在学校投递了少数的大厂。无一例外全部 fail。做百度笔试（上海-基础架构研发）时收到了网易的正式 Offer，看到薪资之后下定决心考研。之后缺忘记了百度的测评。
10月9日，爷爷去世。放弃考研，安心补招。
直到12月，这期间笔试、面试过多家大厂，均失败（腾讯一面挂、阿里一面挂、头条一面挂、美团一面口头通过、挂，滴滴三面挂、快手一面挂、京东二面挂、拼多多笔试挂、AWS 笔试挂）。将近一年的战线让我疲惫不堪，想要放弃的心态让我不想准备面试。半年来读了许多书和文章，谁能想到最大的坎是在算法和一些可以被称为背诵的题目上。
直到今天，2019年的最后一天，我接到了百度 HR 的电话，老东家再次向我敞开了怀抱。这里面有多少是实习经历给我的加分？我不知道。 学海无涯，坚持读书、坚持代码、坚持刷题。让自己每天都有收获，这是我现在能够做的事。
明年我会在哪家公司？明年我会在哪个城市？谁知道呢，就让明天的我做决定吧。
https://github.com/arjenzhou/flashjob-server ↩</description></item><item><title>Week 53, 2019</title><link>/weekly/2019/12/29/week-53-2019/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/12/29/week-53-2019/</guid><description> 回家了 想玩游戏发现鼠标没拿回来，老爹的鼠标又坏了，躺了一周 买了本 「30天自制操作系统」 1 毕设打算写个 OS 2 + complier 老东家三面结束 开始学 rust 3，已经能够输出 Hello World 了（笑 开始写 OS(with rust) 看电棍看得头疼 leetcode 没有停 https://www.ituring.com.cn/book/910 ↩ https://wiki.osdev.org/Main_Page ↩ https://www.rust-lang.org/zh-CN/ ↩</description></item><item><title>Week 52, 2019</title><link>/weekly/2019/12/22/week-52-2019/</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/12/22/week-52-2019/</guid><description> 带着我的阿卡丽完美融入青铜分段&amp;hellip; 花了半天时间在课设上加了搜索功能，检查完成之后老师失踪了，报告一直没交成。 打了几把🎱，全靠蒙。 看了「叶问4」，通篇只有打戏能看，剧情狗血（都去旧金山和海军陆战队打拳了）。 时隔一年多再次通宵，时间过得飞快。 冬至和壮dei看了「误杀」，又吃了顿饺子。去他宿舍时被大爷发现了😅。 老东家完成了二面，面试状态非常差&amp;hellip; 明天就回家了，想到坐一天一夜的车就有点难受。</description></item><item><title>Week 51, 2019</title><link>/weekly/2019/12/15/week-51-2019/</link><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/12/15/week-51-2019/</guid><description> 上周面了三轮结束了，另一家一面后和面试官聊了聊发现和我原来的经理和 mentor 都认识&amp;hellip; 一冲动把三方寄过去了，刚上楼就后悔了。 课设的二手交易网站直接打了个镜像，剩下一周多老师非要加需求。 课设也要每天写日报，搞得我连周报都忘了写。 室友全走了，剩下我独占20平。 都说21天养成一个习惯，leetcode 正好坚持刷了三周21天。 我的阿卡丽越来越猛了。 感冒了，而且有点严重。希望周一的面试不会受影响。 周一又约了面试，估计接下来也没有几家了。 看了一季零三集的瑞克和莫蒂，感觉挺有意思的。 订了下周六回家的机票，结果发现太晚了没有回去的车了&amp;hellip; 抽空把硅谷看完了，还是感觉结局有点遗憾。 越来越感觉周报没什么可写的了，也和每天不干正事有关😅。</description></item><item><title>Week 50, 2019</title><link>/weekly/2019/12/08/week-50-2019/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/12/08/week-50-2019/</guid><description> leetcode 刷了7道题，争取保证不断吧。 又完成了三轮技术面试，第一轮感觉比较基础，第三轮又深入到 cpu 指令，觉得还需要继续修行。hr 没有给后续的消息，等下周看看。 开始读了《程序员的自我修养——链接、装载与库》，体会到了技术人之间的差距，努力向作者看齐。 实在是无聊，看完了10集《非自然死亡》。 新搞了个 k2p，不得不说信号真猛。刷了 padavan 固件之后，按照拦截 ipv6 的流量转发到内网的思路给设备分配 ipv6 地址，但是网口紧接着被学校封了，而且还是两个，只好报修给学校，先把路由器插在隔壁宿舍救急。 一家的状态变成了进度重置；另一家简历被拒绝4次之后状态变成了面试；老东家约了面试之后告知是打错电话了。估计再过几天真的就要把三方寄给猪厂了，不过部门好几已经有几个毁约的了。再次后悔秋招时的过度自信。 明天开始课程设计，打算随便搞搞应付过去。毕设还没想好题目，朋友都已经做完了。 重新看一下 raft 算法的流程，打算找时间实现一下。 豆瓣 fm 的 mac 客户端不太好用，找时间用 electron 包装一下。 收到了寄过来的肖4，估计将来还会有别的，后悔当初动了考研的心思。同时也庆幸没有选择这条路。 yc 退出中国之后， hackernews 反倒能直连了。 对微博和 AB 站的氛围实在是失望，去豆瓣装文艺青年去了。 感觉自己十分讨厌乱用语气词、书面句子口头化和华为。 从 v2 上新学了一个词：泛精英主义。知识和修养足够高的人能够做到包容其他人，希望能够成长成为这样的人。</description></item><item><title>Week 49, 2019</title><link>/weekly/2019/12/01/week-49-2019/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/12/01/week-49-2019/</guid><description>挑了一本上周下载的 Operating Systems: Three easy pieces 1. 来读，这次尝试不用翻译阅读，起初看地比较吃力，后来觉得越来越顺畅了。这本书从虚拟化、并发和持久化三个方面介绍，这种结构更容易把知识打穿，也是我选择这本书的原因。读了7个 chapter 也发现了几个问题，和群里的朋友们探讨了一下：
Q1: 获取系统时间(gettimeofday())是否会进行系统调用？ Switching Between Processes A Non-Cooperative Approach: The OS Takes Control
A timer device can be programmed to raise an interrupt every so many milliseconds; when the interrupt is raised, the currently running process is halted, and a pre-conﬁgured interrupt handler in the OS runs. At this point, the OS has regained control of the CPU, and thus can do what it pleases: stop the current process, and start a different one.</description></item><item><title>Week 48, 2019</title><link>/weekly/2019/11/24/week-48-2019/</link><pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate><guid>/weekly/2019/11/24/week-48-2019/</guid><description> 之前实习的时候写过一段时间的周报，最近觉得需要记录一下自己的生活和学习的过程，避免过地无所事事。所以在今天专门在博客上开了一个周报的 tab，这便是我个人的第一个周报，或者说是周记。
电脑终于到了，是19款13&amp;rdquo; 16+512的，新出的16&amp;rdquo;低配也是16+512套餐，看了看钱包只能安慰自己是为了便携度放弃了16&amp;rdquo;。
折腾了三年多，最后还是迁回 Hugo1 搭建博客，之前一直使用 Travis CI2 做 CD，但是很久没用遇到了 Travis 中 Hugo 下载失败的问题。联想 GitHub Actions 上线不久，调研了相关的静态博客方案后选择了 Hugo + GitHub Pages + GitHub Actions 的方案。参照 hugo-xmin3 主题加入代码高亮4和 disqus5 评论，修改了一些样式，最后完成了你现在所在的这个站点6。
完成了一家公司的二面，起初电话没有听清是哪家公司，后来询问业务才想起只有一家投递了这个部门。有两个多月没有面试过了，一些常见的面试题也忘得差不多。平时能展开滔滔不绝的问题也被面试官问：“你面试别的公司说话也这么简短吗”？其实这些问题根本算不上难，背一些面经也可以回答上来。对我来说合理的面试内容应该是深入挖掘底层基础，一些依靠背诵或阅读几篇文章就能达到同样效果的问题确实让人头疼。身边有相当一部分朋友后悔学习计算机相关专业，我深切地理解这种做着不感兴趣的事的无力感，同时也庆幸自己对计算机科学及行业的热爱。四年间接触过一些能力极强的朋友，不得让感慨：真正的大神还是兴趣驱动，而没有任何功利的想法。 图1，本科期间的一部分计算机相关书籍
在网上7下了不少的英文原版 pdf，起初是为了看 DDIA8 这本书，后来由于收集癖好将所有计算机方面的经典书籍都下了一遍放在 icloud 上。
胸口不舒服有一周了，周日去医院看了看，片子拍出来后大夫告知是熬夜导致的。以后不能熬夜了，待恢复几天后也要加强锻炼。
https://gohugo.io/ ↩ http://travis-ci.org/ ↩ https://github.com/yihui/hugo-xmin ↩ https://highlightjs.org ↩ https://disqus.com/ ↩ https://arjenzhou.github.io ↩ https://www.pdfdrive.com ↩ https://www.amazon.com/gp/product/1449373321/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=dataintensive-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=1449373321&amp;amp;linkId=7b365b768a6f6c8e5e397e48e30d435e ↩</description></item><item><title>Me and Open Source-After Alibaba Summer of Code</title><link>/article/2019/08/29/summer-of-code/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><guid>/article/2019/08/29/summer-of-code/</guid><description>关于阿里巴巴编程之夏的介绍可以参考 AliOS-things 同学的文章 https://zhuanlan.zhihu.com/p/79863308
借秋招的一个间歇期，记录一下我的开源历程。算是对自己的人生阶段的一个记录。
从小学时使用开源软件成为受益者，到第一次到开源社区中成为贡献者，我用了十年。不求回报地默默贡献，得到他人的肯定便觉得欢欣雀跃，也许这就是开源的魅力所在。
图1，赵老师在 Jenkins 中文社区的发言
我第一次正式参与到开源项目中，是在去年的九月。
去年四月的时候，在上海有幸认识了家辉，我们当时便成为了朋友。也是通过他，我了解到了 GSoC。半年之后，觉得是开始套瓷的时间了，便想挑选几个社区来有针对性的交流。第一个关注的是 Apache 的 Kylin 社区，虽然主要开发者是中国人，但是方向和我期望的不太一样，所以后来没有选择它。后来在 GSoC-CN 中根据往年的申请情况，选择了 Jenkins 社区，巧合的是 Jenkins 中文社区刚刚成立，而 Jenkins 社区中活跃的参与者赵老师 @Rick 又是中国人，所以从九月到第二年的三月我便一直在 Jenkins 社区中做贡献，期间成为了 Jenkins-infra member。
图2，赵老师由 KK 宣布为最有价值参与者
转折发生在二月和三月。在年前我和赵老师提到过想申请他的 multibranch plugin，他也提醒过我多次要提早准备。但是我期间一直没有在其 gitter channel 中发言，二月的时候有一个印度的同学也参与到其中。同时在三月时春招受挫，和在蚂蚁的家纯学长聊了聊，决定放弃 GSoC，参与到 Kafka 中去。
图3，和学长的交流
四月的一个偶然机会，了解到 ASoC 的举办，而其中恰好有我想要深入学习的 Dubbo 社区，于是便在 issue 中留言。我没有马上得到回复，而我又不想错过这次机会，于是在 Jira 中留言、给社区发邮件、给导师发邮件、给 aliopensource 发邮件。久久没有得到回复的我有点绝望，当时又去接触了 Spring Cloud Alibaba 社区。后来乎兴老师在 Jira 中回复了我，@cvictory 也在 issue 中回复了我，aliopensource 和社区也都回复了我邮件，让我先写 proposal。有 GSoC 的经历，其实我的提案早就写完了，但是 ASoC 的提案描述相对来说不够具体，很难有针对性的给出解决方案，就这样踏上了漫长的交流之路&amp;hellip;</description></item><item><title>The analysis and modification of rules of ESLint</title><link>/article/2019/07/the-analysis-and-modification-of-eslint-rules/</link><pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate><guid>/article/2019/07/the-analysis-and-modification-of-eslint-rules/</guid><description>每个互联网大厂都有自己的编码规范，而对规范审查需要有代码扫描平台来对工程师的能力进行评估。在实习的两个月中，我负责的工作的一部分包括代码规范扫描方向，其中对 ESLint 以及 fecs 规则的修改及调整也包括在内。ESLint 在内部保留了一个仓库用于 JS 的规范检查，由于内部代码规范的问题，不可能直接将外部的拿来直接使用。对很少接触 JS 的我来说，npm 的包管理方式冗杂而烦乱，同时该模块是被集成在整个扫描平台中的，所以很少有有效的文档用来参考，通过不断地测试最后终于解决了该部分问题。
规则 no-new 要求 使用 new 关键字必须将其赋值给一个变量，如:
var Vue = new Vue({}) 而内部规范在 Vue 中可以不赋值
new Vue({}) 所以考虑对 ESLint 进行一些定制化配置。
查看官方文档无果之后，考虑找到开发人员，以下为交流过程：
arjenzhou: Hi, because I customized the rules, so I want to build and run eslint locally, what should I do?
platinumazure: @arjenzhou You should be able to install ESLint locally with npm install &amp;ndash;save-dev eslint, and then run with .</description></item></channel></rss>